git config (--global) user.name "..."
git config (--global) user.email "..."

git init                        Initializes empty local repo in local directory

git status                      shows which files have been edited and where they are
git log                         shows log of previous commits
git diff                        shows differences unstaged files since last commit
git diff --staged               shows differences staged files since last commit

git add [file1] [file2]
git add --all

git commit                      commits and opens vi editor for comment
git commit -m "Comment123"      commits and adds comment123
git commit -a                   adds and commits tracked files
git commit --amend              adds and new changes to the last commit

git reset HEAD [...]            removes [...] form the stage to tracked
git reset --soft HEAD^          removes all of last commit to staging leaving HEAD at HEAD-1
git reset --hard HEAD^          completely erases all of last commit leaving HEAD at HEAD-1


git checkout ...                create or switch to ...
git checkout -b ...             create and switch to ...
git checkout -- [...]           replaces ... with it's state at last commit





git remote add origin [https://github.com/Fender/example.git]
git remote rm <remoteName>      Removes remote
git remote -v                   lists all know remote repos

git clone [url...]
git clone [url...] [alternate name]     will clone the repo but with an alternative name

git push [origin] [branch]
git push -u [origin] [branch]   set's origin / master as default for subsequent pushes
git push -f [origin] [branch]   forces overwrite of remote with master
git push

git fetch                       syncs local repo with remote repo
git pull                        syncs and then merges local repo with remote



git branch [branch]             creates branch
git checkout [branch]           switches to branch
git merge [branch]              Merges [branch] into current branch (i.e. switch back to master with git checkout master first)
git branch -d [branch]          deletes branch [branch] (use -D to overwrite uncommited changes)
git checkout -b [branch]        creates and checks out [branch]
git branch                      prints all local branches and highlights the selected one
git branch -r                   prints all remote branches
git remote show origin
git push [origin] :[branch]     deletes remote branch
git remote prune origin         deletes reference to stale branches

git branch -m ...               renames branch as ... (must then be pushed/pulled)

git tag                         list all tags
git checkout [tag]              checks out code at commit tagged [tag]
git tag -a [tag] -m [comment]   adds tag
git push --tags                 pushes local tags to remote


git rebase                      moves current branch into a temp space
  git fetch
  git checkout [branch]
  git rebase master

git rebase --continue
git rebase --skip
git rebase --abort

to rebase locally:
  1. select branch to be rebased and merged: git checkout [branch]
  2. from within [branch] give rebase command and target: git rebase [master]
  3. switch back to [master]: git checkout [master]
  4. from within [master] merge branch: git merge [branch]
to rebase to remote:
  1. fetch from remote: git fetch
  2. rebase: git rebase
  3. push
